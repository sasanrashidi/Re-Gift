// vite.config.js
import { defineConfig } from "file:///C:/Users/sasan/source/repos/Re-Gift/re-gift.client/node_modules/vite/dist/node/index.js";
import react from "file:///C:/Users/sasan/source/repos/Re-Gift/re-gift.client/node_modules/@vitejs/plugin-react/dist/index.mjs";
import fs from "fs";
import path from "path";
import child_process from "child_process";
import { env } from "process";
import { fileURLToPath, URL } from "node:url";
var __vite_injected_original_import_meta_url = "file:///C:/Users/sasan/source/repos/Re-Gift/re-gift.client/vite.config.js";
var baseFolder = env.APPDATA !== void 0 && env.APPDATA !== "" ? `${env.APPDATA}/ASP.NET/https` : `${env.HOME}/.aspnet/https`;
var certificateName = "re-gift.client";
var certFilePath = path.join(baseFolder, `${certificateName}.pem`);
var keyFilePath = path.join(baseFolder, `${certificateName}.key`);
if (!fs.existsSync(certFilePath) || !fs.existsSync(keyFilePath)) {
  if (0 !== child_process.spawnSync("dotnet", [
    "dev-certs",
    "https",
    "--export-path",
    certFilePath,
    "--format",
    "Pem",
    "--no-password"
  ], { stdio: "inherit" }).status) {
    throw new Error("Could not create certificate.");
  }
}
var target = env.ASPNETCORE_HTTPS_PORT ? `https://localhost:${env.ASPNETCORE_HTTPS_PORT}` : env.ASPNETCORE_URLS ? env.ASPNETCORE_URLS.split(";")[0] : "https://localhost:7049";
var vite_config_default = defineConfig({
  plugins: [react()],
  // Use the React plugin
  resolve: {
    alias: {
      "@": fileURLToPath(new URL("./src", __vite_injected_original_import_meta_url))
      // Set up alias for @
    }
  },
  server: {
    proxy: {
      "^/weatherforecast": {
        target,
        // tillagd: Use dynamically determined target URL for proxy
        secure: false
      }
    },
    port: 5173,
    https: {
      key: fs.readFileSync(keyFilePath),
      // tillagd: Read key file from dynamically determined path
      cert: fs.readFileSync(certFilePath)
      // tillagd: Read cert file from dynamically determined path
    },
    open: true
    // Automatically open the browser when the server starts
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcuanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCJDOlxcXFxVc2Vyc1xcXFxzYXNhblxcXFxzb3VyY2VcXFxccmVwb3NcXFxcUmUtR2lmdFxcXFxyZS1naWZ0LmNsaWVudFwiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiQzpcXFxcVXNlcnNcXFxcc2FzYW5cXFxcc291cmNlXFxcXHJlcG9zXFxcXFJlLUdpZnRcXFxccmUtZ2lmdC5jbGllbnRcXFxcdml0ZS5jb25maWcuanNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL0M6L1VzZXJzL3Nhc2FuL3NvdXJjZS9yZXBvcy9SZS1HaWZ0L3JlLWdpZnQuY2xpZW50L3ZpdGUuY29uZmlnLmpzXCI7aW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSAndml0ZSc7XHJcbmltcG9ydCByZWFjdCBmcm9tICdAdml0ZWpzL3BsdWdpbi1yZWFjdCc7IC8vIEltcG9ydCB0aGUgcmVhY3QgcGx1Z2luIGNvcnJlY3RseVxyXG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xyXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcclxuaW1wb3J0IGNoaWxkX3Byb2Nlc3MgZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XHJcbmltcG9ydCB7IGVudiB9IGZyb20gJ3Byb2Nlc3MnO1xyXG5pbXBvcnQgeyBmaWxlVVJMVG9QYXRoLCBVUkwgfSBmcm9tICdub2RlOnVybCc7IC8vIHRpbGxhZ2Q6IEltcG9ydCBmb3IgVVJMIGhhbmRsaW5nXHJcblxyXG4vLyBEZWZpbmUgYmFzZSBmb2xkZXIgZm9yIGNlcnRpZmljYXRlc1xyXG5jb25zdCBiYXNlRm9sZGVyID0gZW52LkFQUERBVEEgIT09IHVuZGVmaW5lZCAmJiBlbnYuQVBQREFUQSAhPT0gJydcclxuICAgID8gYCR7ZW52LkFQUERBVEF9L0FTUC5ORVQvaHR0cHNgXHJcbiAgICA6IGAke2Vudi5IT01FfS8uYXNwbmV0L2h0dHBzYDsgLy8gdGlsbGFnZDogRGV0ZXJtaW5lIGJhc2UgZm9sZGVyIGZvciBjZXJ0aWZpY2F0ZXNcclxuXHJcbmNvbnN0IGNlcnRpZmljYXRlTmFtZSA9IFwicmUtZ2lmdC5jbGllbnRcIjtcclxuY29uc3QgY2VydEZpbGVQYXRoID0gcGF0aC5qb2luKGJhc2VGb2xkZXIsIGAke2NlcnRpZmljYXRlTmFtZX0ucGVtYCk7IC8vIHRpbGxhZ2Q6IFBhdGggdG8gdGhlIGNlcnQgZmlsZVxyXG5jb25zdCBrZXlGaWxlUGF0aCA9IHBhdGguam9pbihiYXNlRm9sZGVyLCBgJHtjZXJ0aWZpY2F0ZU5hbWV9LmtleWApOyAgLy8gdGlsbGFnZDogUGF0aCB0byB0aGUga2V5IGZpbGVcclxuXHJcbi8vIENoZWNrIGlmIGNlcnRpZmljYXRlIGZpbGVzIGV4aXN0LCBvdGhlcndpc2UgY3JlYXRlIHRoZW1cclxuaWYgKCFmcy5leGlzdHNTeW5jKGNlcnRGaWxlUGF0aCkgfHwgIWZzLmV4aXN0c1N5bmMoa2V5RmlsZVBhdGgpKSB7IC8vIHRpbGxhZ2Q6IENoZWNrIGZvciBleGlzdGluZyBjZXJ0aWZpY2F0ZSBmaWxlc1xyXG4gICAgLy8gR2VuZXJhdGUgdGhlIGNlcnRpZmljYXRlIGlmIGl0IGRvZXMgbm90IGV4aXN0XHJcbiAgICBpZiAoMCAhPT0gY2hpbGRfcHJvY2Vzcy5zcGF3blN5bmMoJ2RvdG5ldCcsIFtcclxuICAgICAgICAnZGV2LWNlcnRzJyxcclxuICAgICAgICAnaHR0cHMnLFxyXG4gICAgICAgICctLWV4cG9ydC1wYXRoJyxcclxuICAgICAgICBjZXJ0RmlsZVBhdGgsXHJcbiAgICAgICAgJy0tZm9ybWF0JyxcclxuICAgICAgICAnUGVtJyxcclxuICAgICAgICAnLS1uby1wYXNzd29yZCcsXHJcbiAgICBdLCB7IHN0ZGlvOiAnaW5oZXJpdCcgfSkuc3RhdHVzKSB7IC8vIHRpbGxhZ2Q6IENvbW1hbmQgdG8gY3JlYXRlIHRoZSBjZXJ0aWZpY2F0ZVxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBjcmVhdGUgY2VydGlmaWNhdGUuXCIpOyAvLyB0aWxsYWdkOiBUaHJvdyBlcnJvciBpZiBjZXJ0aWZpY2F0ZSBjcmVhdGlvbiBmYWlsc1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBEZXRlcm1pbmUgdGhlIHRhcmdldCBVUkwgYmFzZWQgb24gZW52aXJvbm1lbnQgdmFyaWFibGVzXHJcbmNvbnN0IHRhcmdldCA9IGVudi5BU1BORVRDT1JFX0hUVFBTX1BPUlQgPyBgaHR0cHM6Ly9sb2NhbGhvc3Q6JHtlbnYuQVNQTkVUQ09SRV9IVFRQU19QT1JUfWAgOlxyXG4gICAgZW52LkFTUE5FVENPUkVfVVJMUyA/IGVudi5BU1BORVRDT1JFX1VSTFMuc3BsaXQoJzsnKVswXSA6ICdodHRwczovL2xvY2FsaG9zdDo3MDQ5JzsgLy8gdGlsbGFnZDogRGV0ZXJtaW5lIHRhcmdldCBVUkxcclxuXHJcbi8vIEV4cG9ydCBWaXRlIGNvbmZpZ3VyYXRpb25cclxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29uZmlnKHtcclxuICAgIHBsdWdpbnM6IFtyZWFjdCgpXSwgLy8gVXNlIHRoZSBSZWFjdCBwbHVnaW5cclxuICAgIHJlc29sdmU6IHtcclxuICAgICAgICBhbGlhczoge1xyXG4gICAgICAgICAgICAnQCc6IGZpbGVVUkxUb1BhdGgobmV3IFVSTCgnLi9zcmMnLCBpbXBvcnQubWV0YS51cmwpKSAvLyBTZXQgdXAgYWxpYXMgZm9yIEBcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgc2VydmVyOiB7XHJcbiAgICAgICAgcHJveHk6IHtcclxuICAgICAgICAgICAgJ14vd2VhdGhlcmZvcmVjYXN0Jzoge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiB0YXJnZXQsIC8vIHRpbGxhZ2Q6IFVzZSBkeW5hbWljYWxseSBkZXRlcm1pbmVkIHRhcmdldCBVUkwgZm9yIHByb3h5XHJcbiAgICAgICAgICAgICAgICBzZWN1cmU6IGZhbHNlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHBvcnQ6IDUxNzMsXHJcbiAgICAgICAgaHR0cHM6IHtcclxuICAgICAgICAgICAga2V5OiBmcy5yZWFkRmlsZVN5bmMoa2V5RmlsZVBhdGgpLCAvLyB0aWxsYWdkOiBSZWFkIGtleSBmaWxlIGZyb20gZHluYW1pY2FsbHkgZGV0ZXJtaW5lZCBwYXRoXHJcbiAgICAgICAgICAgIGNlcnQ6IGZzLnJlYWRGaWxlU3luYyhjZXJ0RmlsZVBhdGgpIC8vIHRpbGxhZ2Q6IFJlYWQgY2VydCBmaWxlIGZyb20gZHluYW1pY2FsbHkgZGV0ZXJtaW5lZCBwYXRoXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvcGVuOiB0cnVlIC8vIEF1dG9tYXRpY2FsbHkgb3BlbiB0aGUgYnJvd3NlciB3aGVuIHRoZSBzZXJ2ZXIgc3RhcnRzXHJcbiAgICB9XHJcbn0pO1xyXG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQXNWLFNBQVMsb0JBQW9CO0FBQ25YLE9BQU8sV0FBVztBQUNsQixPQUFPLFFBQVE7QUFDZixPQUFPLFVBQVU7QUFDakIsT0FBTyxtQkFBbUI7QUFDMUIsU0FBUyxXQUFXO0FBQ3BCLFNBQVMsZUFBZSxXQUFXO0FBTnNMLElBQU0sMkNBQTJDO0FBUzFRLElBQU0sYUFBYSxJQUFJLFlBQVksVUFBYSxJQUFJLFlBQVksS0FDMUQsR0FBRyxJQUFJLE9BQU8sbUJBQ2QsR0FBRyxJQUFJLElBQUk7QUFFakIsSUFBTSxrQkFBa0I7QUFDeEIsSUFBTSxlQUFlLEtBQUssS0FBSyxZQUFZLEdBQUcsZUFBZSxNQUFNO0FBQ25FLElBQU0sY0FBYyxLQUFLLEtBQUssWUFBWSxHQUFHLGVBQWUsTUFBTTtBQUdsRSxJQUFJLENBQUMsR0FBRyxXQUFXLFlBQVksS0FBSyxDQUFDLEdBQUcsV0FBVyxXQUFXLEdBQUc7QUFFN0QsTUFBSSxNQUFNLGNBQWMsVUFBVSxVQUFVO0FBQUEsSUFDeEM7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxFQUNKLEdBQUcsRUFBRSxPQUFPLFVBQVUsQ0FBQyxFQUFFLFFBQVE7QUFDN0IsVUFBTSxJQUFJLE1BQU0sK0JBQStCO0FBQUEsRUFDbkQ7QUFDSjtBQUdBLElBQU0sU0FBUyxJQUFJLHdCQUF3QixxQkFBcUIsSUFBSSxxQkFBcUIsS0FDckYsSUFBSSxrQkFBa0IsSUFBSSxnQkFBZ0IsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJO0FBRzlELElBQU8sc0JBQVEsYUFBYTtBQUFBLEVBQ3hCLFNBQVMsQ0FBQyxNQUFNLENBQUM7QUFBQTtBQUFBLEVBQ2pCLFNBQVM7QUFBQSxJQUNMLE9BQU87QUFBQSxNQUNILEtBQUssY0FBYyxJQUFJLElBQUksU0FBUyx3Q0FBZSxDQUFDO0FBQUE7QUFBQSxJQUN4RDtBQUFBLEVBQ0o7QUFBQSxFQUNBLFFBQVE7QUFBQSxJQUNKLE9BQU87QUFBQSxNQUNILHFCQUFxQjtBQUFBLFFBQ2pCO0FBQUE7QUFBQSxRQUNBLFFBQVE7QUFBQSxNQUNaO0FBQUEsSUFDSjtBQUFBLElBQ0EsTUFBTTtBQUFBLElBQ04sT0FBTztBQUFBLE1BQ0gsS0FBSyxHQUFHLGFBQWEsV0FBVztBQUFBO0FBQUEsTUFDaEMsTUFBTSxHQUFHLGFBQWEsWUFBWTtBQUFBO0FBQUEsSUFDdEM7QUFBQSxJQUNBLE1BQU07QUFBQTtBQUFBLEVBQ1Y7QUFDSixDQUFDOyIsCiAgIm5hbWVzIjogW10KfQo=
